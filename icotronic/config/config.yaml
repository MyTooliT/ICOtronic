# =================
# = Shared Values =
# =================

# We use anchors and references to use the same value in the document multiple
# times. This has the advantage that we only have to update the value in
# one place.

# We assume that you use the same CAN bitrate on Linux and Windows
can bitrate: &bitrate 1000000

# =================
# = Configuration =
# =================

# The values below specify the configuration options for the
# [python-can](https://python-can.readthedocs.io) Bus class.
can:
  linux:
    bitrate: *bitrate
    channel: can0
    interface: socketcan
  mac: &can_mac
    bitrate: *bitrate
    channel: PCAN_USBBUS1
    interface: pcan
  windows: *can_mac

logger:
  can:
    # The value below specifies the minimum level of messages logged to
    # `can.log`. Currently the logger only writes debug messages, which means
    # ICOn will write CAN messages, if you specify the value `DEBUG`. If you use
    # a different allowed value, such as `INFO` or `WARNING` no messages will be
    # logged.
    #
    # To retrieve the filepath of the logging file, you can use the following
    # code:
    #
    #     from icotronic.utility.log import get_log_file_handler
    #     print(get_log_file_handler("can.log").baseFilename)
    #
    level: INFO

measurement:
  output:
    # The directory where ICOn stores measurement data in HDF5 format. Relative
    # directories will be interpreted from the current working directory.
    #
    # For example, if we assume that the current working directory is
    # `Documents/Measurement` in the user’s home directory, then the value `..`
    # means that ICOn will store the log file in the directory `Documents` in
    # the home directory.
    #
    # You can also use `~` to refer to the user’s home directory. For example,
    # you can use the value `~/Desktop` if you want to store HDF files on the
    # Desktop of the current user.
    directory: .
    filename: Measurement.hdf5 # The name of the HDF5 file
